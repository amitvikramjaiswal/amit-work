package com.manditrades.activities;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.ToggleButton;

import com.google.gson.Gson;
import com.loopj.android.image.SmartImageView;
import com.manditrades.R;
import com.manditrades.cache.UserProfileCache;
import com.manditrades.jsonwrapper.UserProfile;
import com.manditrades.util.FileUtils;
import com.manditrades.util.HttpUrlConnectionClient;
import com.manditrades.util.JsonDataCallback;
import com.manditrades.util.MTAlertUtil;
import com.manditrades.util.MTURLHelper;

public class SettingActivity extends Activity {

	private Context context;
	private SharedPreferences preferences;

	private SmartImageView userImage;
	private EditText usernameET;
	private EditText mobileET;
	private SmartImageView addImage;
	private ImageButton backButton;
	private ToggleButton vegTogBtn;
	private ToggleButton fruitsTogBtn;
	private ToggleButton cerialsTogBtn;
	private ToggleButton pulsesTogBtn;
	private ToggleButton spicesTogBtn;

	private UserProfile profile;

	private boolean isFromCamera;

	private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 100;
	private Uri fileUri;
	private Bitmap mSelectedImage;
	private String fileExtension;
	public static final int MEDIA_TYPE_IMAGE = 1;
	public static final int MEDIA_TYPE_VIDEO = 2;

	private static String mFileName = null;

	public static int PIC_IMAGE_FROM_GALLERY = 1;

	private Button leftButton;
	private Button rightButton;

	private boolean isFirst;

	public SettingActivity() {

	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		profile = UserProfileCache.getUserProfile().getProfile();

		setContentView(R.layout.activity_settings);

		context = this;

		isFirst = getIntent().getExtras().getBoolean("IS_FIRST_TIME");

		initComponents();
		setActionBar();
		profile = UserProfileCache.getUserProfile().getProfile();

		if (!isFromCamera)
			setValues();

		setListeners();

	}

	private void setActionBar() {
		final Activity activity = (Activity) context;
		activity.getActionBar()
				.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
		activity.getActionBar().setCustomView(
				R.layout.layout_action_bar_govt_feedback);

		View view = LayoutInflater.from(activity).inflate(
				R.layout.layout_action_bar_govt_feedback, null);

		TextView customView = (TextView) view
				.findViewById(R.id.action_bar_title);

		customView.setText("Settings");

		leftButton = (Button) view.findViewById(R.id.exitBtn);
		rightButton = (Button) view.findViewById(R.id.nextBtn);
		backButton = (ImageButton) view.findViewById(R.id.backBtn);

		if (isFirst) {
			edit();
			backButton.setVisibility(View.GONE);
			leftButton.setText("Skip");
			rightButton.setText("Save");
		} else {
			backButton.setVisibility(View.VISIBLE);
			leftButton.setVisibility(View.GONE);

			rightButton.setText("Edit");

			backButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View view) {
					finish();
				}
			});
		}

		leftButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (isFirst) {
					if (null == usernameET.getText()
							|| usernameET.getText().length() < 1)
						usernameET.setText("user"
								+ (int) ((Math.random() * 9000000) + 1000000));
					save();
				} else {
					activity.finish();
				}
			}
		});

		rightButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (rightButton.getText().toString().equalsIgnoreCase("Save")) {
					if (isFirst && null == usernameET.getText())
						usernameET.setText("user"
								+ (int) ((Math.random() * 9000000) + 1000000));
					save();
				} else {
					edit();
				}
			}
		});

		ActionBar.LayoutParams params = new ActionBar.LayoutParams(
				ActionBar.LayoutParams.MATCH_PARENT,
				ActionBar.LayoutParams.MATCH_PARENT, Gravity.CENTER);

		activity.getActionBar().setCustomView(view, params);
	}

	private void edit() {
		mobileET.setEnabled(true);
		usernameET.setEnabled(true);
		addImage.setVisibility(View.VISIBLE);
		rightButton.setText("Save");
	}

	private void setValues() {
		String mobile = preferences.getString("MOBILE_NO", null);
		profile = UserProfileCache.getUserProfile().getProfile();
		mobileET.setText(mobile);
		if (profile == null) {
			getProfile();
			return;
		}
		usernameET.setText(profile.getUsername());
		String profilePicUrl = profile.getImageUrl();
		if (profilePicUrl != null && profilePicUrl.length() > 0)
			userImage.setImageUrl(profilePicUrl);
	}

	private void getProfile() {
		final String mobile = preferences.getString("MOBILE_NO", null);
		String url = MTURLHelper.getAPIEndpointURL(MTURLHelper.getProfileURL);
		String method = "POST";
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("mobile_no", mobile));

		Object[] objects = { url, method, params };

		JsonDataCallback callback = new JsonDataCallback(context) {

			@Override
			public void receiveData(JSONObject responseJson) {
				try {
					if (responseJson != null
							&& !responseJson.toString().contains("status")) {
						UserProfile userProfile = new Gson().fromJson(
								responseJson.getJSONObject("root").toString(),
								UserProfile.class);
						UserProfileCache.getUserProfile().setProfile(
								userProfile, mobile);
						setValues();
					} else {

					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		};

		callback.execute(objects);

	}

	private void setListeners() {
		addImage.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				launchPhotoPickerOption();
			}
		});
	}

	private void save() {
		mobileET.setEnabled(false);
		usernameET.setEnabled(false);
		addImage.setVisibility(View.GONE);
		rightButton.setText("Edit");

		String username = usernameET.getText().toString();
		String mobile = mobileET.getText().toString();
		String userImageBase64 = null;
		try {
			if (fileUri != null)
				userImageBase64 = FileUtils.encodeFileToBase64Binary(fileUri
						.getPath());
		} catch (IOException e) {
			e.printStackTrace();
		}

		Editor editor = preferences.edit();

		if (username != null)
			editor.putString("USERNAME", username);
		if (mobile != null)
			editor.putString("MOBILE", mobile);
		if (userImageBase64 != null)
			editor.putString("USER_IMAGE", userImageBase64);

		editor.commit();
		saveUserProfile(username, mobile, userImageBase64);
	}

	public void launchPhotoPickerOption() {

		MTAlertUtil.showMessesBox(context, "Choose image picker", "",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface arg0, int arg1) {
						openCamera(1);
					}
				}, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface arg0, int arg1) {
						openGallery(1);
					}
				}, "Open Camera", "Open Gallery");

	}

	public void openCamera(int type) {

		Intent intent = null;
		if (type == 1) {
			// create Intent to take a picture and return control to the calling
			// application
			intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
			fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE); // create a file
																// to save the
																// image
			intent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri); // set the image
																// file
			// name
			startActivityForResult(intent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
			isFromCamera = true;
		}
	}

	private void openGallery(int type) {
		if (type == 1) {
			Intent photoPickerIntent = new Intent(Intent.ACTION_GET_CONTENT);
			photoPickerIntent.setType("image/*");
			startActivityForResult(photoPickerIntent, PIC_IMAGE_FROM_GALLERY);
		}
	}

	/** Create a file Uri for saving an image or video */
	private static Uri getOutputMediaFileUri(int type) {
		return Uri.fromFile(getOutputMediaFile(type));
	}

	/** Create a File for saving an image or video */
	private static File getOutputMediaFile(int type) {
		// To be safe, you should check that the SDCard is mounted
		// using Environment.getExternalStorageState() before doing this.

		File mediaStorageDir = new File(
				Environment
						.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
				"MyCameraApp");
		// This location works best if you want the created images to be shared
		// between applications and persist after your app has been uninstalled.

		// Create the storage directory if it does not exist
		if (!mediaStorageDir.exists()) {
			if (!mediaStorageDir.mkdirs()) {
				Log.d("MyCameraApp", "failed to create directory");
				return null;
			}
		}

		// Create a media file name
		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss")
				.format(new Date());
		File mediaFile;
		if (type == MEDIA_TYPE_IMAGE) {
			mediaFile = new File(mediaStorageDir.getPath() + File.separator
					+ "IMG_" + timeStamp + ".jpg");
		} else if (type == MEDIA_TYPE_VIDEO) {
			mediaFile = new File(mediaStorageDir.getPath() + File.separator
					+ "VID_" + timeStamp + ".mp4");

			System.out.println("!@!@!@!@!@  " + mediaFile);

		} else {
			return null;
		}

		return mediaFile;
	}

	private synchronized boolean hasValidBitmap() {
		return mSelectedImage != null && !mSelectedImage.isRecycled();
	}

	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		String mFilePath = null;
		if ((requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE)
				&& resultCode == Activity.RESULT_OK) {
			String filePath = fileUri.getPath();
			try {
				hasValidBitmap();

				mFilePath = filePath;
				fileExtension = "jpg";

			} catch (OutOfMemoryError e) {
				Log.v("Create Group", "Path:" + filePath);
			}

		} else if (requestCode == PIC_IMAGE_FROM_GALLERY) {
			if (intent != null && resultCode == Activity.RESULT_OK) {

				Uri selectedImage = intent.getData();

				String[] filePathColumn = { MediaStore.Images.Media.DATA };
				Cursor cursor = context.getContentResolver().query(
						selectedImage, filePathColumn, null, null, null);
				cursor.moveToFirst();
				int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
				String filePath = cursor.getString(columnIndex);
				cursor.close();

				try {
					hasValidBitmap();
					mFilePath = filePath;

					int dot = mFilePath.lastIndexOf(".");
					fileExtension = mFilePath.substring(dot + 1);

				} catch (OutOfMemoryError e) {
					Log.v("Create Group", "Path:" + filePath);
				}
			}
		}

		if (mFilePath != null) {
			userImage.setImageBitmap(BitmapFactory.decodeFile(mFilePath));
			fileUri = Uri.parse(mFilePath);
		}

	}

	private void saveUserProfile(String username, String mobile,
			String profilePic) {

		String url = MTURLHelper.getAPIEndpointURL(MTURLHelper.saveProfileURL);
		String method = "POST";
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("mobile_no", mobile));
		params.add(new BasicNameValuePair("name", username));
		params.add(new BasicNameValuePair("photo", profilePic));

		Object[] objects = { url, method, params };

		JsonDataCallback callback = new JsonDataCallback(context) {

			@Override
			public void receiveData(JSONObject responseJson) {
				UserProfile profile = null;
				try {
					profile = new Gson().fromJson(
							responseJson.getJSONObject("root").toString(),
							UserProfile.class);

					UserProfileCache.getUserProfile().setProfile(profile, null);
					if (isFirst) {
						finish();
						Intent intent = new Intent(context, HomeActivity.class);
						startActivity(intent);
					} else {
						finish();
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}

			}
		};

		callback.execute(objects);

	}

	@Override
	public void onBackPressed() {
		if (isFirst) {
			if (null == usernameET.getText()
					|| usernameET.getText().length() < 1)
				usernameET.setText("user"
						+ (int) ((Math.random() * 9000000) + 1000000));
			save();
		} else {
			super.onBackPressed();
		}
	}

	private void initComponents() {

		preferences = PreferenceManager.getDefaultSharedPreferences(context);
		userImage = (SmartImageView) findViewById(R.id.user_image);
		usernameET = (EditText) findViewById(R.id.username_et);
		mobileET = (EditText) findViewById(R.id.mobile_et);
		addImage = (SmartImageView) findViewById(R.id.add_image);

	}

}