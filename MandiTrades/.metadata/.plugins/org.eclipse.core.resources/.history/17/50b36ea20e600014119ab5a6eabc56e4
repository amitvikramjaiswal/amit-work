package com.manditrades.activities;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ActionBar;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;

import com.manditrades.R;
import com.manditrades.adapters.NavDrawerListAdapter;
import com.manditrades.cache.UserProfileCache;
import com.manditrades.fragments.HelpFragment;
import com.manditrades.fragments.MainViewPagerFragment;
import com.manditrades.fragments.MyPostsFragment;
import com.manditrades.fragments.SettingFragment;
import com.manditrades.fragments.SubscriptionFragment;
import com.manditrades.fragments.TermsAndConditionsFragment;
import com.manditrades.fragments.WishlistFragment;
import com.manditrades.jsonwrapper.NavDrawerItem;
import com.manditrades.jsonwrapper.UserProfile;
import com.manditrades.pushreceiver.MessageReceivingService;
import com.manditrades.util.CurrentLocation;
import com.manditrades.util.GPSTracker;
import com.manditrades.util.JsonDataCallback;
import com.manditrades.util.LanguageScripts;
import com.manditrades.util.MTURLHelper;
import com.manditrades.util.MTUtil;

public class HomeActivity extends FragmentActivity {

	private DrawerLayout mDrawerLayout;
	private ListView mDrawerList;
	private ActionBarDrawerToggle mDrawerToggle;
	private CharSequence mDrawerTitle;
	private CharSequence mTitle;
	private String[] navMenuTitles;
	private TypedArray navMenuIcons;
	private ArrayList<NavDrawerItem> navDrawerItems;
	private NavDrawerListAdapter adapter;
	private RelativeLayout list_rl;
	private float lastTranslate = 0.0f;
	private int position = 9;
	private Fragment fragment;
	private String username;

	private Context context;
	SharedPreferences preferences;
	SharedPreferences sharedPreferences;

	private String numOfMissedMessages;
	public static Boolean inBackground = true;

	private ListView languageLV;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_home_screen);

		context = this;

		sharedPreferences = PreferenceManager
				.getDefaultSharedPreferences(context);
		
		GPSTracker tracker = new GPSTracker(context);
		CurrentLocation.setCurrentLatitude(tracker.getLatitude());
		CurrentLocation.setCurrentLongitude(tracker.getLongitude());

		ActionBar bar = getActionBar();
		bar.setBackgroundDrawable(new ColorDrawable(Color
				.parseColor("#ff9ab63c")));
		bar.setIcon(R.color.transparent);

		int language = sharedPreferences.getInt("LANGUAGE", 0);

		UserProfile profile = UserProfileCache.getUserProfile().getProfile();

		if (profile != null)
			username = profile.getUsername();

		mTitle = mDrawerTitle = "HELLO"; //getTitle();
		LanguageScripts scripts = new LanguageScripts();
		navMenuTitles = new String[] { username, scripts.language[language],
				scripts.myList[language], scripts.subscription[language],
				scripts.settings[language], scripts.termsnconditions[language],
				scripts.logOut[language], scripts.mandihelp[language],
				scripts.deleteAccount[language] };
		navMenuIcons = getResources()
				.obtainTypedArray(R.array.nav_drawer_icons);
		mDrawerLayout = (DrawerLayout) findViewById(R.id.slider_layout);
		mDrawerList = (ListView) findViewById(R.id.list_slidermenu);
		navDrawerItems = new ArrayList<NavDrawerItem>();

		for (int i = 0; i < navMenuTitles.length; i++) {
			navDrawerItems.add(new NavDrawerItem(navMenuTitles[i], navMenuIcons
					.getResourceId(i, -1)));
		}

		navMenuIcons.recycle();

		mDrawerList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int pos,
					long id) {
				// display view for selected nav drawer item
				displayView(pos);
				position = pos;
			}

		});

		adapter = new NavDrawerListAdapter(getApplicationContext(),
				navDrawerItems);

		mDrawerList.setAdapter(adapter);

		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		final FrameLayout frame = (FrameLayout) findViewById(R.id.frame_container);

		mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
				R.drawable.hamburger, 0, 0) {
			@Override
			public void onDrawerSlide(View drawerView, float slideOffset) {
				float moveFactor = (mDrawerList.getWidth() * slideOffset);

				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
					frame.setTranslationX(moveFactor);
				} else {
					TranslateAnimation anim = new TranslateAnimation(
							lastTranslate, moveFactor, 0.0f, 0.0f);
					anim.setDuration(0);
					anim.setFillAfter(true);
					frame.startAnimation(anim);

					lastTranslate = moveFactor;
				}
			}

			public void onDrawerClosed(View view) {
				// calling onPrepareOptionsMenu() to show action bar icons
				invalidateOptionsMenu();
			}

			public void onDrawerOpened(View drawerView) {
				getActionBar().setTitle(mDrawerTitle);
				// changing overlay color
				mDrawerLayout.setScrimColor(Color.TRANSPARENT);
				// calling onPrepareOptionsMenu() to hide action bar icons
				invalidateOptionsMenu();

				username = sharedPreferences.getString("USERNAME", "");
				navMenuIcons = getResources().obtainTypedArray(
						R.array.nav_drawer_icons);
				navDrawerItems.set(
						0,
						new NavDrawerItem(username, navMenuIcons.getResourceId(
								0, -1)));
				adapter.notifyDataSetChanged();

			}
		};
		mDrawerLayout.setDrawerListener(mDrawerToggle);
		if (savedInstanceState == null) {
			// on first time display view for first nav item
			if (getIntent().hasExtra("IS_FIRST_TIME")
					&& getIntent().getExtras().getBoolean("IS_FIRST_TIME"))
				displayView(4);
			else
				displayView(9);
		}

		numOfMissedMessages = getString(R.string.num_of_missed_messages);
		startService(new Intent(this, MessageReceivingService.class));

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		if (position == 3) {
			fragment.onCreateOptionsMenu(menu, getMenuInflater());
			return true;
		} else if (position == 4) {
			fragment.onCreateOptionsMenu(menu, getMenuInflater());
			return true;
		} else {
			super.onCreateOptionsMenu(null);
			return false;
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// toggle nav drawer on selecting action bar app icon/title
		if (mDrawerToggle.onOptionsItemSelected(item)) {
			return true;
		}
		// Handle action bar actions click
		switch (item.getItemId()) {
//		case R.id.menu_add:
//			if (position == 3) {
//				fragment.onOptionsItemSelected(item);
//			}
//			return true;
		case R.id.menu_edit:
			if (position == 4) {
				fragment.onOptionsItemSelected(item);
			}
			return true;
		case R.id.menu_save:
			if (position == 4) {
				fragment.onOptionsItemSelected(item);
			}
			return true;
		default:
			return false;
		}
	}

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		// if nav drawer is opened, hide the action bar items
		@SuppressWarnings("unused")
		boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
		return super.onPrepareOptionsMenu(menu);
	}

	private void displayView(int position) {
		// update the main content by replacing fragments
		switch (position) {
		case 0:
			fragment = new MyPostsFragment();
			break;
		case 1:
			list_rl = (RelativeLayout) findViewById(R.id.listview_rl);
			list_rl.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
				}
			});

			String[] listItem = new String[] { "English", "हिन्दी", "తెలుగు",
					"ಕನ್ನಡ", "தமிழ்", "മലയാളം" };

			languageLV = (ListView) findViewById(R.id.lang_list);
			list_rl.setVisibility(View.VISIBLE);

			final ViewGroup header = (ViewGroup) getLayoutInflater().inflate(
					R.layout.language_header_view, languageLV, false);
			languageLV.addHeaderView(header);

			ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
					android.R.layout.simple_list_item_1, android.R.id.text1,
					listItem);

			// setting slide up animation to listview
			Animation animFadein = AnimationUtils.loadAnimation(
					getApplicationContext(), R.anim.slidein);
			languageLV.startAnimation(animFadein);
			languageLV.setAdapter(adapter);

			languageLV
					.setOnItemClickListener(new AdapterView.OnItemClickListener() {
						@Override
						public void onItemClick(AdapterView<?> parent,
								View viewClicked, int position, long id) {
							languageLV.removeHeaderView(header);
							// setting slide down animation to listview
							TranslateAnimation animate = new TranslateAnimation(
									0, 0, 0, languageLV.getHeight() + 20);
							animate.setDuration(400);
							languageLV.startAnimation(animate);
							animate.setAnimationListener(new AnimationListener() {
								@Override
								public void onAnimationStart(Animation animation) {
								}

								@Override
								public void onAnimationRepeat(
										Animation animation) {
								}

								@Override
								public void onAnimationEnd(Animation animation) {
									list_rl.setVisibility(View.GONE);
								}
							});

							Editor editor = sharedPreferences.edit();
							if (position == 0)
								editor.putInt("LANGUAGE", position);
							else
								editor.putInt("LANGUAGE", position - 1);

							editor.commit();

							LanguageScripts scripts = new LanguageScripts();

							String[] navMenuTitles1 = new String[] { username,
									scripts.language[position - 1],
									scripts.myList[position - 1],
									scripts.subscription[position - 1],
									scripts.settings[position - 1],
									scripts.termsnconditions[position - 1],
									scripts.logOut[position - 1],
									scripts.mandihelp[position - 1],
									scripts.deleteAccount[position - 1] };

							navDrawerItems.clear();

							navMenuIcons = getResources().obtainTypedArray(
									R.array.nav_drawer_icons);

							for (int i = 0; i < navMenuTitles.length; i++) {
								navDrawerItems.add(new NavDrawerItem(
										navMenuTitles1[i], navMenuIcons
												.getResourceId(i, -1)));
							}

							HomeActivity.this.adapter.notifyDataSetChanged();

							displayView(9);

						}
					});
			break;
		case 2:
			fragment = new WishlistFragment();
			break;
		case 3:
			fragment = new SubscriptionFragment();
			break;
		case 4:
			fragment = new SettingFragment();
			break;
		case 5:
			fragment = new TermsAndConditionsFragment();
			break;
		case 6:
			// Logout
			logout();
			break;
		case 7:
			fragment = new HelpFragment();
			break;
		case 8:
			// Delete
			break;
		default:
			fragment = new MainViewPagerFragment();
			break;
		}

		if (fragment != null) {
			FragmentManager fragmentManager = getSupportFragmentManager();
			fragmentManager.beginTransaction()
					.replace(R.id.frame_container, fragment).commit();

			// update selected item and title, then close the drawer
			mDrawerList.setItemChecked(position, true);
			mDrawerList.setSelection(position);
			if (position < 9)
				setTitle(navMenuTitles[position]);
			mDrawerLayout.closeDrawer(mDrawerList);
		} else {
			// error in creating fragment
			Log.e("MainActivity", "Error in creating fragment");
		}
	}

	private void logout() {
		String url = MTURLHelper.getAPIEndpointURL(MTURLHelper.logoutURL);
		String method = "POST";
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("mobile_no", sharedPreferences
				.getString("MOBILE_NO", "")));
		params.add(new BasicNameValuePair("device", MTUtil.getDeviceId(context)));

		Object[] objects = { url, method, params };

		JsonDataCallback callback = new JsonDataCallback(context) {
			@Override
			public void receiveData(JSONObject responseJson) {
				sharedPreferences.edit().remove("MOBILE_NO").commit();
				finish();
				Intent intent = new Intent(context, SignInSignUpActivity.class);
				startActivity(intent);
			}
		};

		callback.execute(objects);
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
	}

	@Override
	public void setTitle(CharSequence title) {
		mTitle = title;
		getActionBar().setTitle(mTitle);
	}

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
		// Sync the toggle state after onRestoreInstanceState has occurred.
		mDrawerToggle.syncState();
		createEndPoint();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		// Pass any configuration change to the drawer toggls
		mDrawerToggle.onConfigurationChanged(newConfig);
	}

	@Override
	public void onBackPressed() {

		System.out.println("@@@@ " + position + " @@@@");

		switch (position) {
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
			position = 9;
			displayView(9);
			super.onCreateOptionsMenu(null);
			break;
		default:
			super.onBackPressed();
			finish();
			System.exit(0);
			break;
		}

	}

	public void onStop() {
		super.onStop();
		inBackground = true;
	}

	public void onResume() {
		super.onResume();
		inBackground = false;
		preferences = MessageReceivingService.savedValues;
		int numOfMissedMessages = 0;
		if (preferences != null) {
			numOfMissedMessages = preferences.getInt(this.numOfMissedMessages,
					0);
		}
		String newMessage = getMessage(numOfMissedMessages);
		if (newMessage != "") {
			Log.i("displaying message", newMessage);
		}

	}

	private String getMessage(int numOfMissedMessages) {
		String message = "";
		String linesOfMessageCount = getString(R.string.lines_of_message_count);
		if (numOfMissedMessages > 0) {
			String plural = numOfMissedMessages > 1 ? "s" : "";
			Log.i("onResume", "missed " + numOfMissedMessages + " message"
					+ plural);
			for (int i = 0; i < preferences.getInt(linesOfMessageCount, 0); i++) {
				String line = preferences.getString("MessageLine" + i, "");
				message += (line + "\n");
			}
			NotificationManager mNotification = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
			mNotification.cancel(R.string.notification_number);
			SharedPreferences.Editor editor = preferences.edit();
			editor.putInt(this.numOfMissedMessages, 0);
			editor.putInt(linesOfMessageCount, 0);
			editor.commit();
		} else {
			Log.i("onResume", "no missed messages");
			Intent intent = getIntent();
			if (intent != null) {
				Bundle extras = intent.getExtras();
				if (extras != null) {
					for (String key : extras.keySet()) {
						message += key + "=" + extras.getString(key) + "\n";
					}
				}
			}
		}
		message += "\n";
		return message;
	}

	private void createEndPoint() {
		String deviceToken = sharedPreferences.getString("DEVICE_TOKEN", null);

		String url = MTURLHelper
				.getAPIEndpointURL(MTURLHelper.createEndpointURL);
		String method = "POST";
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("deviceToken", deviceToken));
		params.add(new BasicNameValuePair("device", "android"));

		Object[] objects = { url, method, params };

		JsonDataCallback callback = new JsonDataCallback(context) {
			@Override
			public void receiveData(JSONObject responseJson) {
				try {
					String endpoint = responseJson.getJSONObject("root")
							.getString("endpoint");
					Editor editor = sharedPreferences.edit();
					editor.putString("ENDPOINT", endpoint);
					editor.commit();
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		};

		callback.execute(objects);
	}

}
