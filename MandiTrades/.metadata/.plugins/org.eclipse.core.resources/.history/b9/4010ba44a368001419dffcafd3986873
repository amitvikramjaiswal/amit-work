package com.manditrades.adapters;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.loopj.android.image.SmartImageView;
import com.manditrades.R;
import com.manditrades.cache.CommoditiesCache;
import com.manditrades.cache.UserProfileCache;
import com.manditrades.jsonwrapper.MTSeller;
import com.manditrades.util.JsonDataCallback;
import com.manditrades.util.MTFormatter;
import com.manditrades.util.MTURLHelper;
import com.manditrades.util.MTUtil;

public class ViewAlertListAdapter extends BaseAdapter {

	private Context context;
	private ArrayList<MTSeller> sellers;
	private TextView messageTV;
	private TextView distanceTV;
	private TextView dateTV;
	private ImageView deleteIV;
	private SmartImageView commoditySIV;

	public ViewAlertListAdapter(Context context, ArrayList<MTSeller> sellers) {
		this.context = context;
		this.sellers = sellers;
	}

	@Override
	public int getCount() {
		return sellers.size();
	}

	@Override
	public MTSeller getItem(int position) {
		return sellers.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {

		if (convertView == null) {
			LayoutInflater mInflater = (LayoutInflater) context
					.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
			convertView = mInflater.inflate(R.layout.notification_template,
					null);
		}

		commoditySIV = (SmartImageView) convertView
				.findViewById(R.id.commodity_siv);
		messageTV = (TextView) convertView.findViewById(R.id.messages);
		distanceTV = (TextView) convertView.findViewById(R.id.distance);
		dateTV = (TextView) convertView.findViewById(R.id.date);
		deleteIV = (ImageView) convertView.findViewById(R.id.delete);

		String imageUrl = CommoditiesCache.getCommoditiesCache()
				.getCommodityUrl(
						sellers.get(position).getSellerCommodity() + "_"
								+ sellers.get(position).getSellerVariety());

		commoditySIV.setImageUrl(imageUrl);
		String unit = sellers.get(position).getSellerQuantity()
				.equalsIgnoreCase("1") ? " Kg of " : " Kgs of ";
		messageTV.setText(sellers.get(position).getSellerName()
				+ " is selling " + sellers.get(position).getSellerQuantity()
				+ unit + sellers.get(position).getSellerCommodity() + "("
				+ sellers.get(position).getSellerVariety() + ") at Rs."
				+ sellers.get(position).getSellerPrice() + "/Kg");
		distanceTV.setText(MTUtil.computeDistance(sellers.get(position)
				.getLatLang()[0], sellers.get(position).getLatLang()[1])
				+ " Away");
		String date = MTFormatter.getFormattedPostDate(sellers.get(position)
				.getDOC().getDate());
		dateTV.setText(date);

		deleteIV.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				String url = MTURLHelper
						.getAPIEndpointURL(MTURLHelper.deleteNotificationUrl);
				String method = "POST";

				List<NameValuePair> params = new ArrayList<NameValuePair>();

				params.add(new BasicNameValuePair("seller_mobile",
						UserProfileCache.getUserProfile().getProfile()
								.getMobile()));
				params.add(new BasicNameValuePair("id", sellers.get(position)
						.getSellerId().getId()));
				
				Object [] objects = { url, method, params };
				
				JsonDataCallback callback = new JsonDataCallback(context) {
					
					@Override
					public void receiveData(JSONObject responseJson) {
						
					}
				};
				callback.execute(objects);
			}
		});

		return convertView;
	}
}
