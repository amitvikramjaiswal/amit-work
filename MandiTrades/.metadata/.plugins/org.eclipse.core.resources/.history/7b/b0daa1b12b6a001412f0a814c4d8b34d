package com.manditrades.pushreceiver;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import me.leolin.shortcutbadger.ShortcutBadgeException;
import me.leolin.shortcutbadger.ShortcutBadger;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.IBinder;
import android.preference.PreferenceManager;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

import com.google.android.gms.gcm.GoogleCloudMessaging;
import com.manditrades.R;
import com.manditrades.activities.HomeActivity;
import com.manditrades.util.JsonDataCallback;
import com.manditrades.util.MTURLHelper;

/*
 * This service is designed to run in the background and receive messages from gcm. If the app is in the foreground
 * when a message is received, it will immediately be posted. If the app is not in the foreground, the message will be saved
 * and a notification is posted to the NotificationManager.
 */
public class MessageReceivingService extends Service {
	private GoogleCloudMessaging gcm;
	public static SharedPreferences savedValues;

	public static void sendToApp(Bundle extras, Context context) {
		// Intent newIntent = new Intent();
		// newIntent.setClass(context, HomeActivity.class);
		// newIntent.putExtras(extras);
		// newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		// context.startActivity(newIntent);
	}

	public void onCreate() {
		super.onCreate();
		final String preferences = getString(R.string.preferences);
		savedValues = getSharedPreferences(preferences, Context.MODE_PRIVATE);
		// In later versions multi_process is no longer the default
		if (VERSION.SDK_INT > 9) {
			savedValues = getSharedPreferences(preferences,
					Context.MODE_MULTI_PROCESS);
		}
		gcm = GoogleCloudMessaging.getInstance(getBaseContext());
		SharedPreferences savedValues = PreferenceManager
				.getDefaultSharedPreferences(this);
		if (savedValues.getBoolean(getString(R.string.first_launch), true)) {
			register(this);
			SharedPreferences.Editor editor = savedValues.edit();
			editor.putBoolean(getString(R.string.first_launch), false);
			editor.commit();
		}
		// Let AndroidMobilePushApp know we have just initialized and there may
		// be stored messages
		sendToApp(new Bundle(), this);
	}

	protected static void saveToLog(Bundle extras, Context context) {
		SharedPreferences.Editor editor = savedValues.edit();
		String numOfMissedMessages = context
				.getString(R.string.num_of_missed_messages);
		int linesOfMessageCount = 0;
		for (String key : extras.keySet()) {
			String line = String.format("%s=%s", key, extras.getString(key));
			editor.putString("MessageLine" + linesOfMessageCount, line);
			linesOfMessageCount++;
		}
		editor.putInt(context.getString(R.string.lines_of_message_count),
				linesOfMessageCount);
		editor.putInt(context.getString(R.string.lines_of_message_count),
				linesOfMessageCount);
		editor.putInt(numOfMissedMessages,
				savedValues.getInt(numOfMissedMessages, 0) + 1);
		editor.commit();
		postNotification(new Intent(context, HomeActivity.class), context,
				extras.getString("message"));
	}

	protected static void postNotification(Intent intentAction,
			Context context, String message) {
		final NotificationManager mNotificationManager = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);

		final PendingIntent pendingIntent = PendingIntent.getActivity(context,
				0, intentAction, Notification.DEFAULT_LIGHTS
						| Notification.FLAG_AUTO_CANCEL);
		
		try {
			ShortcutBadger.setBadge(context, 10);
		} catch (ShortcutBadgeException e) {
			e.printStackTrace();
		}
		
		final Notification notification = new NotificationCompat.Builder(
				context).setSmallIcon(R.drawable.appicon)
				.setContentTitle("Mandi Trades").setContentText(message)
				.setContentIntent(pendingIntent).setAutoCancel(true)
				.getNotification();

		notification.defaults |= Notification.DEFAULT_SOUND;
		notification.defaults |= Notification.DEFAULT_LIGHTS;
		notification.defaults |= Notification.DEFAULT_VIBRATE;

		mNotificationManager.notify(R.string.notification_number, notification);
	}

	private void register(final Context context) {
		gcm = GoogleCloudMessaging.getInstance(getApplicationContext());
		new AsyncTask() {
			String token;

			protected Object doInBackground(final Object... params) {

				try {
					token = gcm.register(getString(R.string.project_number));
					SharedPreferences savedValues = PreferenceManager
							.getDefaultSharedPreferences(context);
					Editor editor = savedValues.edit();
					editor.putString("DEVICE_TOKEN", token);
					editor.commit();
					Log.i("registrationId", token);
				} catch (IOException e) {
					Log.i("Registration Error", e.getMessage());
				}
				return true;
			}

			protected void onPostExecute(Object result) {
				createEndPoint(token, context);
			};

		}.execute(null, null, null);
	}

	public IBinder onBind(Intent arg0) {
		return null;
	}

	private void createEndPoint(String deviceToken, final Context context) {
		String url = MTURLHelper
				.getAPIEndpointProductionURL(MTURLHelper.createEndpointURL);
		String method = "POST";
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("deviceToken", deviceToken));
		params.add(new BasicNameValuePair("device", "android"));

		Object[] objects = { url, method, params };
		
		JsonDataCallback callback = new JsonDataCallback(context) {
			@Override
			public void receiveData(JSONObject responseJson) {
				try {
					SharedPreferences sharedPreferences = PreferenceManager
							.getDefaultSharedPreferences(context);
					String endpoint = responseJson.getJSONObject("root")
							.getString("endpoint");
					Editor editor = sharedPreferences.edit();
					editor.putString("ENDPOINT", endpoint);
					editor.commit();
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		};

		callback.execute(objects);
	}

}